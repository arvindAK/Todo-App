{"version":3,"sources":["components/TodoItems.js","App.js","serviceWorker.js","index.js"],"names":["TodoItems","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createItems","bind","assertThisInitialized","item","_this2","react_default","a","createElement","key","className","concat","prioity","done","type","value","onChange","e","updatePrioity","min","max","checked","onClick","delete","text","listDoneItems","listUndoneItems","todoEntries","entries","filter","map","length","react_flip_move_es","duration","easing","Component","App","componentDidMount","json","localStorage","getItem","items","JSON","parse","setState","componentDidUpdate","stringify","state","setItem","addItem","deleteItem","doneItem","forEach","target","sort","b","parseFloat","filteredItems","preventDefault","_inputElement","newItem","Date","now","prevState","onSubmit","placeholder","ref","components_TodoItems","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e005e21.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport FlipMove from 'react-flip-move';\n\nclass TodoItems extends Component {\n  constructor(props){\n    super(props)\n\n    this.createItems = this.createItems.bind(this);\n  }\n\n  createItems(item) {\n    return (\n      <div key={item.key} className={`item priority_${item.prioity} done_${item.done}`}>\n        <input type=\"number\" value={item.prioity} onChange={(e) => this.updatePrioity(item.key, e)} min=\"1\" max=\"3\" className=\"priority\" />\n        <label>\n          <input type=\"checkbox\" onChange={() => this.done(item.key)} checked={item.done}/>\n          <span></span>\n        </label>\n        <span className=\"close\" onClick={() => this.delete(item.key)}>X</span>\n        <span className=\"item_text\">{item.text}</span>\n\n      </div>\n    )\n  }\n\n  delete(key) {\n    this.props.delete(key);\n  }\n\n  done(key) {\n    this.props.done(key);\n  }\n\n  updatePrioity(key, e) {\n    this.props.updatePrioity(key, e);\n  }\n\n  render() {\n    let listDoneItems = [];\n    let listUndoneItems = listDoneItems;\n\n    let todoEntries = this.props.entries;\n    if (todoEntries !== null) {\n      listUndoneItems = todoEntries\n        .filter(item => item.done === false)\n        .map(this.createItems);\n\n      listDoneItems = todoEntries\n        .filter(item => item.done === true)\n        .map(this.createItems);\n    }\n\n    return(\n      <div className=\"container\">\n        {listUndoneItems.length > 0 && <div className=\"theList\">\n          <h2>Yet Todo</h2>\n          <FlipMove duration={250} easing=\"ease-in-out\">\n            {listUndoneItems}\n          </FlipMove>\n        </div>\n      }\n\n        <FlipMove duration={350} easing=\"ease-in-out\">\n        {listDoneItems.length > 0 && <div className=\"theList\">\n          <h2>Done Todo</h2>\n          <FlipMove duration={350} easing=\"ease-in-out\">\n            {listDoneItems}\n          </FlipMove>\n          <span className=\"count\">\n            {todoEntries.filter(item => item.done === true).length} out of {todoEntries.length} completed\n          </span>\n        </div>}\n        </FlipMove>\n\n      </div>\n    );\n  }\n};\n\nexport default TodoItems;\n","import React, { Component } from 'react';\nimport TodoItems from './components/TodoItems';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state= {\n      items: [],\n    }\n\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.doneItem = this.doneItem.bind(this);\n    this.updatePrioity = this.updatePrioity.bind(this);\n  }\n\n  componentDidMount = () => {\n    const json = localStorage.getItem('items');\n    const items = JSON.parse(json);\n    this.setState({ items })\n  }\n\n  componentDidUpdate = () => {\n    const items = JSON.stringify(this.state.items);\n    localStorage.setItem(\"items\", items);\n  }\n\n  updatePrioity(key, e) {\n    let items = this.state.items;\n    items.forEach(item => {\n      if (item.key === key) item.prioity = e.target.value\n    });\n    items.sort((a, b) => parseFloat(b.prioity) - parseFloat(a.prioity))\n    this.setState({ items });\n  }\n\n  deleteItem(key) {\n    let filteredItems = this.state.items.filter(item => item.key !== key);\n    this.setState({ items: filteredItems });\n  }\n\n  doneItem(key) {\n    let items = this.state.items;\n    items.forEach(item => {\n      if (item.key === key) {\n        item.done = !item.done\n      }\n    });\n    this.setState({ items });\n  }\n\n  addItem(e) {\n    e.preventDefault();\n    if (this._inputElement.value !== \"\") {\n      let newItem = [{\n        text: this._inputElement.value,\n        done: false,\n        prioity: 1,\n        key: Date.now()\n      }]\n\n      if (this.state.items === null) {\n        this.setState({ items: newItem });\n      } else {\n        this.setState((prevState) => {\n          return {\n            items: prevState.items.concat(newItem).sort((a, b) => parseFloat(b.prioity) - parseFloat(a.prioity))\n          };\n        });\n      }\n      this._inputElement.value = \"\";\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"header\">\n          <form onSubmit={this.addItem}>\n            <input placeholder = \"Enter Task\" type=\"text\"\n              ref = {a => this._inputElement = a}>\n            </input>\n            <button type=\"submit\">Add</button>\n          </form>\n        </div>\n        <TodoItems\n          entries={this.state.items}\n          delete={this.deleteItem}\n          done={this.doneItem}\n          updatePrioity={this.updatePrioity}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}